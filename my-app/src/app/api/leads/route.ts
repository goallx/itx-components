import { NextResponse } from "next/server";
import nodemailer from "nodemailer";

import { createClient } from "@supabase/supabase-js";
import { getZohoAccessToken } from "@/lib/zoho";

export async function POST(req: Request) {
  try {
    const { searchParams } = new URL(req.url);
    const course = searchParams.get("course");
    const body = await req.json();

    const { ÿßŸÑÿßÿ≥ŸÖ: name, ÿßŸÑÿßŸäŸÖŸäŸÑ: email, "ÿ±ŸÇŸÖ ÿßŸÑŸáÿßÿ™ŸÅ": phone } = body;

    if (!name || !email || !phone) {
      return NextResponse.json(
        { success: false, error: "Missing required fields" },
        { status: 400 }
      );
    }

    const [firstName, lastName] = name.split(" ");

    const { access_token } = await getZohoAccessToken();

    const res = await fetch("https://www.zohoapis.com/crm/v2/Leads", {
      method: "POST",
      headers: {
        Authorization: `Zoho-oauthtoken ${access_token}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        data: [
          {
            Last_Name: firstName,
            First_Name: lastName,
            Email: email,
            Company: "",
            Phone: phone,
          },
        ],
      }),
    });

    const data = await res.json();

    const supabaseAdmin = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY!
    );

    const { error } = await supabaseAdmin
      .from("leads")
      .insert([{ name, email, phone, course }]);
    if (error) {
      console.error("Insert lead error:", error);
    }

    const transporter = nodemailer.createTransport({
      host: "smtp.sendgrid.net",
      port: 587,
      auth: {
        user: "apikey",
        pass: process.env.SENDGRID_API_KEY!,
      },
    });

    const html = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #e5e5e5; border-radius: 8px; background-color: #f9f9f9;">
      <h2 style="color: #333333; text-align: center;">üì© New Lead Submission</h2>
      <p style="font-size: 16px; color: #555555;">You have received a new lead. Here are the details:</p>
  
      <table style="width: 100%; border-collapse: collapse; margin-top: 10px;">
        <tr>
          <td style="padding: 8px; border-bottom: 1px solid #ddd;"><strong>Name:</strong></td>
          <td style="padding: 8px; border-bottom: 1px solid #ddd;">${name}</td>
        </tr>
        <tr>
          <td style="padding: 8px; border-bottom: 1px solid #ddd;"><strong>Email:</strong></td>
          <td style="padding: 8px; border-bottom: 1px solid #ddd;">${email}</td>
        </tr>
        <tr>
          <td style="padding: 8px; border-bottom: 1px solid #ddd;"><strong>Phone:</strong></td>
          <td style="padding: 8px; border-bottom: 1px solid #ddd;">${phone}</td>
        </tr>
        <tr>
          <td style="padding: 8px;"><strong>Course:</strong></td>
          <td style="padding: 8px;">${course || "‚Äî"}</td>
        </tr>
      </table>
  
      <p style="margin-top: 20px; font-size: 14px; color: #888888; text-align: center;">
        This email was automatically generated by your website's lead form.
      </p>
    </div>
  `;

    const mailOptions = {
      from: process.env.SENDGRID_FROM_EMAIL!,
      to: process.env.SENDGRID_TO_EMAIL!,
      subject: `New Lead: ${name} - ${phone} - ${course}`,
      html,
    };

    await transporter.sendMail(mailOptions);

    return NextResponse.json({
      success: true,
      message: "Lead submitted successfully",
    });
  } catch (error: any) {
    console.error(error);
    return NextResponse.json(
      { success: false, error: error.message || "Failed to send email" },
      { status: 500 }
    );
  }
}
